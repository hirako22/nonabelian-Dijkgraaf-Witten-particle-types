import os
import string
import numpy as np
import itertools

"""
Given a finite gauge group with group data and a gauss code of a knot, this computes the particle types.
The group data needed is the following:
      1) "gaugeGroup" - A list of strings representing gauge group elements. This list MUST start with "1"
      2) "conjugacyClasses" - A string of the different conjugacy classes of the gauge group. Different conjugacy classes must be 
            separated with a space, different elements must be separated with a comma
      3) "parseElement(string)" - A function that evaluates a group word string and outputs the corresponding group element
      4) "inverse" - A dictionary mapping a group element with its inverse
      5) "findSubgroup(torus, homomorphism, centerOfTorus, particleSet)" - a function that takes in a pair, finds their centralizer subgroup
See below for examples.

NOTE: this current version assumes a file that is a list of Wirtinger presentations from a list gauss codes of knots generated from
https://knotinfo.math.indiana.edu/
This list of Wirtinger presentations can be generated from code provided here, after the examples of input gauge group data.

"""

############################################################################################

gaugeGroup = ["1", "r", "a", "aa", "ar", "aar"]

conjugacyClasses = "1 r,aar,ar a,aa"

# determines the element of any combination of a and r
def parseElement(s3_string):
  permuted = [1, 2, 3]
  for letter in reversed(s3_string):
    if letter == 'a':
      permuted = [permuted[2], permuted[0], permuted[1]]
    elif letter == 'r':
      permuted = [permuted[1], permuted[0], permuted[2]]
    elif letter == '1':
      pass
    else:
      print("Invalid S_3 element: "+str(letter))
      break
  if permuted == [1, 2, 3]:
    return "1"
  elif permuted == [2, 1, 3]:
    return "r"
  elif permuted == [3, 1, 2]:
    return "a"
  elif permuted == [3, 2, 1]:
    return "ar"
  elif permuted == [2, 3, 1]:
    return "aa"
  else:
    return "aar"

# given an element of s_3 as a string, returns string of its inverse
inverse = {
    "1": "1",
    "r": "r",
    "a": "aa",
    "aa": "a",
    "ar": "ar",
    "aar": "aar"
}

def findSubgroup(torus, homomorphism, centerOfTorus, particleSet):
  conjugations = {homomorphism} #set of unique homomorphisms under conjugation by the center of the pair
  for element in centerOfTorus:
    conjugated = conjugate(homomorphism, element)
    if not conjugated in conjugations:
      conjugations.add(conjugated)
  size = len(conjugations)
  # possible centralizers: 1, z_2, z_3
  if size == 1:
    particleSet.add("[("+torus+"), trivial]")
  elif size == 2:
    particleSet.add("[("+torus+"), trivial]"+u'\u2295'+"[("+torus+"), sign]")
  else: #(size == 3)
    particleSet.add("[("+torus+"), trivial]"+u'\u2295'+"[("+torus+"), w]"+u'\u2295'+"[("+torus+"), w^2]")
  return


"""
############################################################################################

gaugeGroup = ["1", "r", "a", "aa", "aaa", "ra", "raa", "raaa"]

conjugacyClasses = "1 r,raa a,aaa aa ra,raaa"

def parseElement(d8_string):
  permuted = [1, 2, 3, 4]
  for letter in reversed(d8_string):
    if letter == 'a':
      permuted = [permuted[3], permuted[0], permuted[1], permuted[2]]
    elif letter == 'r':
      permuted = [permuted[1], permuted[0], permuted[3], permuted[2]]
    elif letter == '1':
      pass
    else:
      print("Invalid D_8 element: "+str(letter))
      break
  if permuted == [1, 2, 3, 4]:
    return "1"
  elif permuted == [2, 1, 4, 3]:
    return "r"
  elif permuted == [4, 1, 2, 3]:
    return "a"
  elif permuted == [3, 4, 1, 2]:
    return "aa"
  elif permuted == [2, 3, 4, 1]:
    return "aaa"
  elif permuted == [1, 4, 3, 2]:
    return "ra"
  elif permuted == [4, 3, 2, 1]:
    return "raa"
  else:
    return "raaa"

inverse = {
    "1": "1",
    "r": "r",
    "a": "aaa",
    "aa": "aa",
    "aaa": "a",
    "ra": "ra",
    "raa": "raa",
    "raaa": "raaa"
}

def findSubgroup(torus, homomorphism, centerOfTorus, particleSet):
  conjugations = {homomorphism} #set of unique homomorphisms under conjugation by the center of the pair
  z_2 = 0 #for tracking the number of order 2 elements under conjugation
  for element in centerOfTorus:
    conjugated = conjugate(homomorphism, element)
    if not conjugated in conjugations:
      conjugations.add(conjugated)
    if conjugated != homomorphism and conjugate(conjugated, element) == homomorphism:
      z_2 += 1
  size = len(conjugations)
  # possible centralizers: 1, z_2, z_4, Klein, D_8
  if size == 1:
    particleSet.add("[("+torus+"), trivial]")
  elif size == 2:
    particleSet.add("[("+torus+"), trivial]"+u'\u2295'+"[("+torus+"), sign]")
  elif size == 3:
    particleSet.add("[("+torus+"), trivial]"+u'\u2295'+"[("+torus+"), w]"+u'\u2295'+"[("+torus+"), w^2]")
  elif size == 8:
    particleSet.add("[("+torus+"), trivial]"+u'\u2295'+"[("+torus+"), r^2]"+u'\u2295'+"[("+torus+"), r]"
    +u'\u2295'+"[("+torus+"), r]"+u'\u2295'+"[("+torus+"), s]"+u'\u2295'+"[("+torus+"), rs]")
  elif size == 4: # must distinguish between z_4 and Klein
    if z_2 == 3:
      particleSet.add("[("+torus+"), trivial]"+u'\u2295'+"[("+torus+"), (1, -1)]")
    else:
      particleSet.add("[("+torus+"), trivial]"+u'\u2295'+"[("+torus+"), w]"+u'\u2295'+"[("+torus+"), w^2]"
      +u'\u2295'+"[("+torus+"), w^3]")
  return

############################################################################################
"""
"""
############################################################################################

gaugeGroup = ["1", "a", "b", "c", "ab", "ac", "ba", "bb", "cb", "cc", "aba", "abb", "acb", "acc", "bac", "cba", "cbb", "acba", "acbb", "babb", "abac", "cbac", "ababb", "acbac"]

conjugacyClasses = "1 a,babb,cb,abac,acba,cbac b,aba,bac,ababb,acb,cba,ac,bb c,abb,acc,cbb,ba,ab cc,acbb,acbac"

def parseElement(s4_string):
  permuted = [1, 2, 3, 4]
  for letter in reversed(s4_string):
    if letter == 'a':
      permuted = [permuted[0], permuted[1], permuted[3], permuted[2]]
    elif letter == 'b':
      permuted = [permuted[1], permuted[2], permuted[0], permuted[3]]
    elif letter == 'c':
      permuted = [permuted[3], permuted[0], permuted[1], permuted[2]]
    elif letter == '1':
      pass
    else:
      print("Invalid S_4 element: "+str(letter))
      break
  if permuted == [1, 2, 3, 4]:
    return "1"
  elif permuted == [1, 2, 4, 3]:
    return "a"
  elif permuted == [1, 3, 2, 4]:
    return "abac"
  elif permuted == [1, 3, 4, 2]:
    return "bac"
  elif permuted == [1, 4, 2, 3]:
    return "ababb"
  elif permuted == [1, 4, 3, 2]:
    return "babb"
  elif permuted == [2, 1, 4, 3]:
    return "acbac"
  elif permuted == [2, 1, 3, 4]:
    return "cbac"
  elif permuted == [2, 3, 1, 4]:
    return "b"
  elif permuted == [2, 3, 4, 1]:
    return "ab"
  elif permuted == [2, 4, 1, 3]:
    return "ba"
  elif permuted == [2, 4, 3, 1]:
    return "aba"
  elif permuted == [3, 1, 2, 4]:
    return "bb"
  elif permuted == [3, 1, 4, 2]:
    return "abb"
  elif permuted == [3, 2, 1, 4]:
    return "acba"
  elif permuted == [3, 2, 4, 1]:
    return "cba"
  elif permuted == [3, 4, 1, 2]:
    return "cc"
  elif permuted == [3, 4, 2, 1]:
    return "acc"
  elif permuted == [4, 1, 2, 3]:
    return "c"
  elif permuted == [4, 1, 3, 2]:
    return "ac"
  elif permuted == [4, 2, 1, 3]:
    return "acb"
  elif permuted == [4, 2, 3, 1]:
    return "cb"
  elif permuted == [4, 3, 1, 2]:
    return "cbb"
  else: # permuted == [4, 3, 2, 1]:
    return "acbb"

inverse = {
    "1": "1",
    "a": "a", #(34)
    "b": "bb",
    "bb": "b",
    "c": "ab",
    "ab": "c",
    "ac": "aba",
    "aba": "ac",
    "ba": "abb",
    "abb": "ba",
    "cb": "cb", #(14)
    "cc": "cc",
    "acb": "cba",
    "cba": "acb",
    "acc": "cbb",
    "cbb": "acc",
    "bac": "ababb",
    "ababb": "bac",
    "acba": "acba", #(13)
    "acbb": "acbb",
    "babb": "babb", #(24)
    "abac": "abac", #(23)
    "cbac": "cbac", #(12)
    "acbac": "acbac"
}

def findSubgroup(torus, homomorphism, centerOfTorus, particleSet):
  conjugations = {homomorphism} #set of unique homomorphisms under conjugation by the center of the pair
  z_2 = 0 #for tracking the number of order 2 elements under conjugation
  for element in centerOfTorus:
    conjugated = conjugate(homomorphism, element)
    if not conjugated in conjugations:
      conjugations.add(conjugated)
    if conjugated != homomorphism and conjugate(conjugated, element) == homomorphism:
      z_2 += 1
  size = len(conjugations)
  # possible centralizers: 1, z_2, z_3, z_4, Klein, d_8
  if size == 1:
    particleSet.add("[("+torus+"), trivial]")
  elif size == 2:
    particleSet.add("[("+torus+"), trivial]"+u'\u2295'+"[("+torus+"), sign]")
  elif size == 3:
    particleSet.add("[("+torus+"), trivial]"+u'\u2295'+"[("+torus+"), w]"+u'\u2295'+"[("+torus+"), w^2]")
  elif size == 8:
    particleSet.add("[("+torus+"), trivial]"+u'\u2295'+"[("+torus+"), r^2]"+u'\u2295'+"[("+torus+"), r]"
    +u'\u2295'+"[("+torus+"), r]"+u'\u2295'+"[("+torus+"), s]"+u'\u2295'+"[("+torus+"), rs]")
  elif size == 4: # must distinguish between z_4 and Klein
    if z_2 == 3:
      particleSet.add("[("+torus+"), trivial]"+u'\u2295'+"[("+torus+"), (1, -1)]")
    else:
      particleSet.add("[("+torus+"), trivial]"+u'\u2295'+"[("+torus+"), w]"+u'\u2295'+"[("+torus+"), w^2]"
      +u'\u2295'+"[("+torus+"), w^3]")
  return

"""

############################################################################################

##########################################################################################################
# Code that computes the Wirtinger presentation of pi_1 of a knot complement given the knot's gauss code #
##########################################################################################################

def python2sort(x):
  it = iter(x)
  groups = [[next(it)]]
  for item in it:
    for group in groups:
      try:
        item < group[0]  # exception if not comparable
        group.append(item)
        break
      except TypeError:
        continue
    else:  # did not break, make new group
      groups.append([item])
  return itertools.chain.from_iterable(sorted(group) for group in groups)


def get_color_spread(n):
  start = 16711680
  hexStrings = []
  if n < 30: # should always be the case for our purposes
    for i in range(n):
      hexStrings.append(hex(start+i))
  return hexStrings


# almost completely copied from https://www.cs.mcgill.ca/~aassaf9/python/algorithm_x.html by Ali Assaf
def select(X, Y, r):
  cols = []
  for j in Y[r]:
    for i in X[j]:
      for k in Y[i]:
        if k != j:
          X[k].remove(i)
    cols.append(X.pop(j))
  return cols

def deselect(X, Y, r, cols):
  for j in reversed(Y[r]):
    X[j] = cols.pop()
    for i in X[j]:
      for k in Y[i]:
        if k != j:
          X[k].add(i)

def solve(X, Y, solution=[]):
  if not X:
    yield list(solution)
  else:
    c = min(X, key=lambda c: len(X[c]))
    for r in list(X[c]):
      solution.append(r)
      cols = select(X, Y, r)
      for s in solve(X, Y, solution):
        yield s
      deselect(X, Y, r, cols)
      solution.pop()


def algorithm_X(rows):
  Xa, Ya = {}, {}
  max = 0
  for i in range(len(rows)):
    row = rows[i]
    Ya[i] = row
    if np.max(row) > max:
      max = np.max(row)
  Xa = {i: set() for i in range(max+1)}
  for i in Ya:
    for j in Ya[i]:
      Xa[j].add(i)
  allSols = []
  for solution in solve(Xa, Ya, []):
    allSols.append(solution)
  return allSols


# taken/modified from sage.graphs.graph_coloring
# https://github.com/sagemath/sagelib/blob/master/sage/graphs/graph.py
# .coloring() calls .first_coloring() in graphs/graph_coloring.py
# .first_coloring() calls .all_graph_colorings() in same file
def all_graph_colorings(V,E,n):
  # V = vertices, E = edges
  if n == 0: return
  nV, nE = len(V), len(E)
  ones, N, Vd, colormap, k = [], range(n), {}, {}, 0
  for i in range(nV):
    v = V[i]
    Vd[v] = i
    for c in N:
      ones.append([k, [i]])
      colormap[k] = (v,c)
      k+=1
  kk = nV
  for e in E:
    for c in N:
      v0, v1 = n*Vd[e[0]]+c, n*Vd[e[1]]+c
      ones[v0][1].append(kk+c)
      ones[v1][1].append(kk+c)
    kk+=n
  if n > 2:
    for i in range(n*nE):
      ones.append([k+i, [nV+i]])
  colors = get_color_spread(n) # just create n distinct colors, n <= 30, if more then add something
  for i in range(len(ones)): ones[i] = ones[i][1]
  try: #########################################################################
    exc = algorithm_X(ones)
    for a in exc:
      coloring = {}
      for x in a:
        if x in colormap:
          v,c = colormap[x]
          if colors[c] in coloring:
            coloring[colors[c]].append(v)
          else:
            coloring[colors[c]] = [v]
      if len(list(coloring.values())) == 2:
        yield coloring # indented to be included in if statement
        break
  except RuntimeError:
    raise RuntimeError("Too much recursion!  Graph coloring failed.")


def recover_orientations(gauss):
  signs_overunder = [1 if letter > 0 else -1 for letter in gauss]
  gauss = [abs(x) for x in gauss]
  n = len(gauss) // 2
  # first step, perform subword reversals
  changed = list(gauss)
  for i in range(1, n + 1):
    id0 = changed.index(i)
    start = changed[:id0 + 1]
    after0 = changed[id0 + 1:]
    id1 = after0.index(i)
    middle = list(reversed(after0[:id1]))
    end = after0[id1:]
    changed = start + middle + end
  # build noncrossing planar diagram
  pairings = [[] for _ in range(n)]
  for pos, letter in enumerate(changed):
    pairings[letter - 1].append(pos)
  pairings = [tuple(ab) for ab in pairings] # these are vertices
  def cross(ab, cd):
    a, b = ab
    c, d = cd
    if c < a:
      a, b, c, d = c, d, a, b
    return a < c < b < d
  #####################################################
  edges = []
  verts = list(pairings)
  numVerts = len(pairings)
  for u in range(numVerts): #x
    for v in range(u+1): #x
      uu, vv = verts[u], verts[v]
      if cross(uu,vv):
        edges.append((uu,vv))
  for m in range(n, numVerts+1): #x
    for C in all_graph_colorings(verts, edges, m):
      # in python 3 C.values() is its own object which cannot subscript
      colors = list(C.values()) # in python 2, C.values() would be a list
      break
    break
  #####################################################
  if colors is None:  # empty graph
    positive = []
    negative = []
  elif len(colors) == 1:
    positive = colors[0]
    negative = []
  else:
    positive, negative = python2sort(colors)
  positive.sort()
  negative.sort()
  # determine the local orientations
  signs_local = {d: 1 for d in range(1, n + 1)}
  for x, _ in negative:
    signs_local[changed[x]] *= -1
  jump_from = {}
  for x, y in positive + negative:
    jump_from[x] = y
    jump_from[y] = x
  direction = 1
  position = 0
  for k in range(2*n):
    letter = changed[position]
    new_position = jump_from[position]
    signe = signs_local[letter]
    if new_position < position:
      signe = -signe
    if direction == 1:
      signe *= signs_overunder[k]
    signs_local[letter] = signe
    direction = -direction
    position = new_position + direction
  signs_final = [signs_local[d] for d in range(1, n + 1)]
  return changed, positive, negative, signs_final

"""
Each sequence between negative numbers in the gauss code represents an arc in the
blackboard presentation. We return a dictionary in which the positive numbers
between the negative numbers will map to the arc that they're a part of. We also
return a list of the arcs. The arcs in both returns are represented by a list of
integers, with negative integers on the ends of the list.
"""
def knot_group_from_gauss(gauss_code_string):
  # creates list of ints from the string input of the gauss code
  gauss_code = [int(i) for i in gauss_code_string.strip().split(',')]
  ch, pos, neg, signs = recover_orientations(gauss_code) # get crossings chirality
  arcs = {} # dictionary - keys are the positive ints, values are subsequences
  arc_subsequence = []
  positive_crossings_in_arc = []
  list_of_arcs = []
  i = 0
  # if the first number is positive
  if gauss_code[i] > 0:
    while gauss_code[i] > 0:
      arc_subsequence.append(gauss_code[i])
      positive_crossings_in_arc.append(gauss_code[i])
      i -= 1
    arc_subsequence.append(gauss_code[i])
    arc_subsequence.reverse()
  else:
    arc_subsequence.append(gauss_code[i])

  # go through sequence
  for number in gauss_code[1:]:
    arc_subsequence.append(number)
    if number > 0:
      positive_crossings_in_arc.append(number)
    else:
      if len(positive_crossings_in_arc) > 0:
        for p in positive_crossings_in_arc:
          arcs[p] = arc_subsequence
        list_of_arcs.append(arc_subsequence)
      else:
        arcs[arc_subsequence[0]] = arc_subsequence
        list_of_arcs.append(arc_subsequence)
      positive_crossings_in_arc = []
      arc_subsequence = [number]
  if number > 0: # If the last number is positive finish the sequence via wrap-around
    i = 0
    while number > 0:
      positive_crossings_in_arc.append(number)
      number = gauss_code[i]
      arc_subsequence.append(number)
      i += 1
    for p in positive_crossings_in_arc:
      arcs[p] = arc_subsequence
    if list_of_arcs[0] != arc_subsequence: # in case both first and last numbers of gauss code are positive
      list_of_arcs.append(arc_subsequence)
  return arcs, list_of_arcs, signs


"""
Given 1) a dictionary: positive numbers -> the arc they're on, and 2) a list of
the arcs, we create a dictionary: arcs -> "x_n", where n runs over the length of
the list of arcs. With 3), a list of the orientations of the crossings (given an
orientation, we construct the list of quotients; for each arc from the arc list:

    arc_list[i+1] = arc ->_gm "x_{i+1}" 
    arc[-1] = positive crossing ->_al arc with said positive crossing ->_gm "x_j"
    arc_list[i] = arc ->_gm "x_i"

where ->_gm is using the generator map constructed in this function, and ->_al
is using the map from positive crossings to arcs constructed in the previous
function.
"""
def get_wirtinger_from_arcs(gauss_code, arcs, arc_list, signs):
  gen_map = {}
  gen_index = 1
  # there are only up to 12 crossings in our set
  # so we don't need to worry about time. If we
  # do, then construct the generator dictionary
  # in the knot_group_from_gauss function
  for i in range(len(arc_list)):
    if arc_list[i][0] == -1:
      arc_list = arc_list[i:] + arc_list[:i]
      break # ensures we start with -1
  gen_string = ""
  for arc in arc_list:
    gen_map[str(arc)] = "x" + str(gen_index)
    gen_string += "x" + str(gen_index) + ","
    gen_index += 1
  gen_string = gen_string[:-1]
  quotient_string = ""
  arc = arc_list[-1] # kept this out front for wirtinger simplification later
  chirality = signs[-1*arc[-1]-1]
  quotient_string += gen_map[str(arc_list[0])] + "*,"
  quotient_string += gen_map[str(arcs[arc[-1]*-1])]
  if chirality == 1:
    quotient_string += "*"
  quotient_string += "," + gen_map[str(arc_list[-1])] + ","
  quotient_string += gen_map[str(arcs[arc[-1]*-1])]
  if chirality == -1:
    quotient_string += "*"
  quotient_string += " "
  for i in range(len(arc_list)-1):
    arc = arc_list[i]
    chirality = signs[-1*arc[-1]-1]
    quotient_string += gen_map[str(arc_list[i+1])] + "*,"
    quotient_string += gen_map[str(arcs[arc[-1]*-1])]
    char = gen_map[str(arcs[arc[-1]*-1])]
    if chirality == 1:
      quotient_string += "*"
      char += "*"
    quotient_string += "," + gen_map[str(arc_list[i])] + ","
    quotient_string += gen_map[str(arcs[arc[-1]*-1])]
    if chirality == -1:
      quotient_string += "*"
    quotient_string += " "
  return gen_string, quotient_string[:-1] # [:-1] because commas

############################################################################################


########################################################################################
# Code that computes the particle types given the input gauge group data and pi_1 list #
########################################################################################

"""
 given a string of generators (each char denotes a generator) and an array of
 associated elements of the gauge group under the proposed homomorphism (which is referred
 to here as a CODE), creates a dictionary. Given an array of quotient strings, 
 checks if the code gives a viable homomorphism.
"""
def checkQuotients(gens, code, qArray):
  gen_list = gens.split(",")
  code_list = code.split(",")
  if len(gen_list) != len(code_list):
    # this shouldn't come up
    print("Code is not the same length as the generators.")
    return False
  dictionary = {}
  for i in range(0,len(gen_list)):
    dictionary.update({gen_list[i]: code_list[i]})
  # checks if all the quotients work out
  for quotient in qArray:
    quotient_list = quotient.split(",")
    translatedQuotient = ""
    # write quotients in terms of elements of group
    for q in quotient_list: # element in quotient
      if q[-1] == '*':
        translatedQuotient = translatedQuotient + inverse[dictionary[q[:-1]]]
      else:
        translatedQuotient = translatedQuotient + dictionary[q]
    if parseElement(translatedQuotient) != "1":
      return False
  #print("homomorphism: "+str(code))
  return True


# given a tuple (python list) of elements of group and an element of group,
# returns the conjugated word by that element
def conjugate(word, el):
  word_list = word.split(",")
  conjugated = []
  for c in word_list:
    conjugated.append(parseElement(el + c + inverse[el])) # ghg^{-1}
  return ",".join(conjugated)


# with an input of, say, 'x11' or 'x11*' returns 11
def index(generatorString):
  if generatorString[-1] == '*':
    generatorString = generatorString[:-1]
  if len(generatorString) == 2:
    return int(generatorString[-1])
  else: # only handles a double-digit number of generators
    return int(generatorString[1:])

# doesn't account for chirality yet -- don't use
def checkQuotientsWirtinger(c, qArray):
  for quotient in reversed(qArray): # x1*,x2,x3,x2* x2*,x3,x1,x3* x3*,x1,x2,x1*
    relation = quotient.split(",")  # [x3*, x1, x2, x1*]
    if conjugate(c[index(relation[2])-1],c[index(relation[1])-1]) != c[index(relation[0])-1]:
      return False
  #print("homomorphism: "+str(c))
  return True


def addHomomorphisms(code_set, prefix, k, genString, quotientArray, setOfElements):
  if k == 0:
    if checkQuotients(genString, prefix, quotientArray):
      code_set.append(prefix)
    return
  for element in setOfElements:
    newPrefix = prefix + "," + element
    if prefix == "":
      newPrefix = element
    addHomomorphisms(code_set, newPrefix, k-1, genString, quotientArray, setOfElements)


"""
code_set = set of codes that work out to be the image of a homomorphism
prefix = the current code we're assembling
k = elements left to add to our prefix
indNum = number of elements we can independently choose before the rest of the quotient
         relations can determine the rest of the letters of our potential code
g = list of strings, where each string is a generator
qList = list of quotient strings
setOfElements = the elements from which we're drawing our letters for our potential code
"""
def addHomomorphismsWirtinger(code_set, prefix, k, indNum, g, qList, simplifyList, setOfElements):
  if k == 0:
    initialLength = len(prefix)
    for i in range(len(g)-indNum):
      rel = qList[i+initialLength]
      relList = rel.split(",")
      if relList[1][-1] == "*":
        prefix.append(conjugate(prefix[-1], inverse[prefix[simplifyList[i]-1]])) # inverse
      else:
        prefix.append(conjugate(prefix[-1], prefix[simplifyList[i]-1]))
    if checkQuotients(",".join(g), ",".join(prefix), qList):
      code_set.append(",".join(prefix))
    return
  for element in setOfElements:
    previousLength = len(prefix)
    if prefix == []:
      prefix = [element]
    else:
      prefix.append(element)
    addHomomorphismsWirtinger(code_set, prefix, k-1, indNum, g, qList, simplifyList, setOfElements)
    prefix = prefix[:previousLength]


def simplifyWirtinger(code_set, generators, quotientList):
  conjugacyClassesList = conjugacyClasses.split(" ")
  # since all generators in a Wirtinger presentation are related by conjugations,
  # we select our maps from conjugacy classes in gauge group
  gs = generators.split(",")
  length = len(gs)
  sList = []
  for q in reversed(quotientList):  # x1*,x2,x3,x2* x2*,x3,x1,x3* x3*,x1,x2,x1*
    relation = q.split(",")         # [x3*, x1, x2, x1*]
    num = index(relation[1])
    if num >= length:
      break
    length -= 1
    sList.append(num)
  sList = [e for e in reversed(sList)]
  for cClass in conjugacyClassesList:
    addHomomorphismsWirtinger(code_set, [], length, length, gs, quotientList, sList, cClass.split(","))


# given a set of codes and a new potential code, checks if the code is a
# conjugate of any already present code. Returns True if the new code is a
# conjugate, False otherwise
def checkConjugate(codeSet, newCode):
  if newCode in codeSet:
    return False
  for element in gaugeGroup[1:]:
    conjugated = conjugate(newCode, element)
    if conjugated in codeSet:
        return True
  return False






def computeLongitude(gens, code_list, l):
  gen_list = gens.split(",")
  l_list = l.split(",")
  if len(gen_list) != len(code_list):
    # this shouldn't come up
    print("Code is not the same length as the generators.")
    return False
  dictionary = {}
  for i in range(0,len(gen_list)):
    dictionary.update({gen_list[i]: code_list[i]})
  # map l_bb word via homomorphism into gauge group
  l_gg = ""
  for l_letter in l_list:
    if l_letter[-1] == '*':
      l_gg = l_gg + inverse[dictionary[l_letter[:-1]]]
    else:
      l_gg = l_gg + dictionary[l_letter]
  return parseElement(l_gg)


# given the image of the homomorphism of the pi_1(T^2), returns a list of the
# elements of the gauge group that commute with the two elements
def computeCenter(m, l):
  commuters = ["1"]
  for element in gaugeGroup[1:]:
    conjugate_m = parseElement(element + m + inverse[element])
    conjugate_l = parseElement(element + l + inverse[element])
    if conjugate_m == m and conjugate_l == l:
      commuters.append(element)
  return commuters



def particleTypes(generators, quotientsArray, longitude, wirtinger):
  homomorphismSet = []
  # create all associations of generators with elements in gauge group
  if wirtinger:
    simplifyWirtinger(homomorphismSet, generators, quotientsArray)
  else:
    addHomomorphisms(homomorphismSet, "", len(generators.split(",")), generators, quotientsArray, gaugeGroup)
  homModConjugation = {}
  homCenter = {}
  homMod = []
  #print(homomorphismSet)
  for homomorphism in homomorphismSet:
    h = homomorphism.split(",") # can optimize this function to ensure the first always starts with a representative element of the conjugacy class
    for cClass in conjugacyClasses.split(" "):
      if cClass.split(",")[0] == h[0]:
        homMod.append(h)
    
    #if h[0] == '1' or h[0] == 'a' or h[0] == 'b' or h[0] == 'c' or h[0] == 'cc': 
    #  homMod.append(h)
  # compute l
  for codeCand in homMod:
    lImage = computeLongitude(generators, codeCand, longitude)
    pair = codeCand[0] + "," + lImage
    homModConjugation[",".join(codeCand)] = pair
    center = computeCenter(codeCand[0], lImage)
    homCenter[pair] = center
  particleTypes = set([])
  # pair (m, l) with representations, take direct sums if need be
  for hom in homModConjugation.keys():
    pair = homModConjugation[hom]
    pairCenter = homCenter[pair]
    findSubgroup(pair, hom, pairCenter, particleTypes)
  return particleTypes






def makeL0(qList):
  l_bb = []
  for i in range(len(qList)-1):
    rel = qList[i+1]
    element = rel.split(",")[-1]
    l_bb.append(element)
  l_bb.append(qList[0].split(",")[-1]) # add the last one
  powerCount = 0
  for generator in l_bb:
    if generator[-1] == "*":
      powerCount -= 1
    else:
      powerCount += 1
  if powerCount > 0:
    for i in range(powerCount):
      l_bb.append("x1*")
    return ",".join(l_bb)
  elif powerCount < 0:
    for i in range(powerCount*-1):
      l_bb.append("x1")
    return ",".join(l_bb)
  else:
    return ",".join(l_bb)


def printKnotGroup(gaussCode):
  g, l, s = knot_group_from_gauss(gaussCode)
  g, q = get_wirtinger_from_arcs(gaussCode, g, l, s) #, lBB = get_wirtinger_from_arcs(gaussCode, g, l, s)
  return g, q

def printParticlesGauss(g, q):
  quotient_list = q.split(" ")
  l_0 = makeL0(quotient_list)
  particles = particleTypes(g, quotient_list, l_0, True)
  printQ = ""
  for q in quotient_list:
    for el in q.split(","):
      printQ = printQ + el
    printQ = printQ + "="
  printQ = printQ + "1"
  #os.system('clear')
  string = "\tFor the fundamental group\n"
  string += "\t<"+g+"|"+printQ+">\n"
  string += "\twith longitude "+l_0.replace(",","")+",\n"
  string += "\tthe particle types are:\n"
  string += "\n"

  for p in particles:
    string += "\t__________________________________________________________________\n"
    string += "\t|"+p+"\n"
  string += "\t__________________________________________________________________\n"
  string += "\n"
  return string


def customGroupInput():
  os.system('clear')
  print("\n")
  print("\t****************************************************************")
  print("\t**  S_4 Dijkgraaf-Witten particle types on a knot complement  **")
  print("\t****************************************************************")
  print("\n")
  print("\t Input the generators fundamental group of your manifold:")
  print("\t Write the generators as one string, separated by a comma.")
  print("\t For example, if your group is <x1, x2| x1^3=x2^2=x1^(-1)x2=1>,")
  print("\t input the string as 'x1,x2' (without quotes). Not robust for")
  print("\t inputs differing from these instructions.")
  gens = input()
  print("\t Now input the quotients of the group presentation. Separate")
  print("\t the quotient words by a space. Denote the inverse of a")
  print("\t generator by adding a '*' to the end. For the above example,")
  print("\t the input would be 'x1,x1,x1 x2,x2 x1*,x2' (without quotes).")
  quotients = input()
  quotient_list = quotients.split(" ")
  print("\t Now input the word of the meridian using the conventions above.")
  lInput = input()

  os.system('clear')
  print("\t Calculating...")
  particles = particleTypes(gens, quotient_list, lInput, False)
  printQ = ""
  for q in quotient_list:
    for el in q.split(","):
      printQ = printQ + el
    printQ = printQ + "="
  printQ = printQ + "1"

  os.system('clear')
  print("For the fundamental group")
  print("<"+gens+"|"+printQ+">,")
  print("with meridian "+lInput)
  print("the particle types are:")
  print("\n")

  for p in particles:
    print("__________________________________________________________________")
    print("|"+p)
  print("__________________________________________________________________")
  print("\n")

from google.colab import drive 
drive.mount('/content/gdrive')

import pandas as pd
df = pd.read_csv('gdrive/My Drive/knotinfo.csv')

f = open('gdrive/My Drive/pi1.txt', 'r') #can be created using gauss code -> wirtinger code provided above
lines = f.readlines()
f.close()
with open('gdrive/My Drive/s_3TEST.txt', 'w') as writefile:
  skip = True
  for line in lines[1:]:
    name, pi1 = line.split(":")
    print(name)
    g, q = pi1.split("|")
    writefile.write("----\n")
    writefile.write(name+"\n")
    writefile.write("----\n")
    sp = printParticlesGauss(g, q.rstrip("\n"))
    writefile.write(sp)
    writefile.write("\n")
